name: OSV Scanner

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  scan-pr:
    if: github.event_name == 'pull_request'
    uses: google/osv-scanner-action/.github/workflows/osv-scanner-reusable-pr.yml@v2.2.2
    with:
      scan-args: |-
        --config=osv-scanner.toml
        ./
      results-file-name: osv-results.sarif
      fail-on-vuln: false  # We'll handle this in the check-critical step

  scan-scheduled:
    if: github.event_name == 'push' || github.event_name == 'schedule'
    uses: google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@v2.2.2
    with:
      scan-args: |-
        --config=osv-scanner.toml
        ./
      results-file-name: osv-results.sarif
      fail-on-vuln: false  # We'll handle this in the check-critical step

  check-critical:
    runs-on: ubuntu-latest
    needs: [scan-pr, scan-scheduled]
    if: always() && (needs.scan-pr.result == 'success' || needs.scan-scheduled.result == 'success')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          name: osv-results
          
      - name: Check for critical vulnerabilities
        run: |
          # Install jq if not available
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
          
          # Parse SARIF for critical vulnerabilities
          if [ -f "osv-results.sarif" ]; then
            # Count critical vulnerabilities (CVSS >= 9.0)
            critical_count=$(jq '[.runs[].results[]? | select(
              .rule.properties.precision == "very-high" or
              (.rule.properties.tags[]? | contains("CRITICAL")) or
              (.rule.properties.security_severity_level? == "critical") or
              (.rule.properties.cvss_score? >= 9.0)
            )] | length' osv-results.sarif 2>/dev/null || echo "0")
            
            echo "Found $critical_count critical vulnerabilities"
            
            if [ "$critical_count" -gt 0 ]; then
              echo "❌ Critical vulnerabilities detected!"
              jq '.runs[].results[]? | select(
                .rule.properties.precision == "very-high" or
                (.rule.properties.tags[]? | contains("CRITICAL")) or
                (.rule.properties.security_severity_level? == "critical") or
                (.rule.properties.cvss_score? >= 9.0)
              ) | {
                id: .ruleId,
                message: .message.text,
                severity: .rule.properties.security_severity_level,
                cvss: .rule.properties.cvss_score
              }' osv-results.sarif 2>/dev/null || true
              exit 1
            else
              echo "✅ No critical vulnerabilities found"
            fi
          else
            echo "⚠️ Could not find vulnerability report"
          fi